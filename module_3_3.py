# Самостоятельная работа по уроку "Распаковка позиционных параметров"

# Задача "Распаковка"

# Цель задания:
# Освоить создание функций с параметрами по умолчанию и практику вызова этих функций с различным количеством аргументов.

# – Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.
# – Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию,
#   что упрощает работу с данными.

# Важно!
# Нельзя передавать списки, задавая по умолчанию пустой список или другой изменяемый тип данных!
# В таком случае, если этот список будет изменён внутри функции,
# то на следующий вызов функции он останется в том же состоянии.


def a(item, my_list = []):    # Это приводит к ошибкам!
    my_list.append(item)
    print(my_list)


# Можно передавать вот так:
# список создаётся локально, мы не влияем на его изменение вне функции.


def append_to_list(item, list_my=None):
    if list_my is None:
        list_my = []
        list_my.append(item)
    print(list_my)


def print_params(a = 1, b = 'строка', c = True):
    print(a, b, c)


print_params()
# >>> 1 строка True

print_params(2)
# >>> 2 строка True

print_params(2, 5)
# >>> 2 5 True

print_params(2, False, [1, 2, 3])
# >>> 2 False [1, 2, 3]

print_params(b = 25)
# >>> 1 25 True

print_params(c = [1,2,3])
# >>> 1 строка [1, 2, 3]

values_list = [25, "привет!", [10, 11, 12]]
values_dict = {'a': "пока!", 'b': 15, 'c': [7, 8, 9]}

print_params(*values_list)
# >>> 25 привет! [10, 11, 12]

print_params(**values_dict)
# >>> пока! 15 [7, 8, 9]

values_list_2 = [54.32, 'Строка']

print_params(*values_list_2, 42)
# >>> 54.32 Строка 42

print ('\nРабота завершена.')